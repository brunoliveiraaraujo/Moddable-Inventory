; ############################################################################################
; ########################################## items.ini #######################################
; ############################################################################################
; This file contains the data of all items in the game.
; All items must first be enumerated in their corresponding types' sections.
; --------------------------------------------------------------------------------------------
; Item types sections define the display name of the category for that type of item and
; an array with the name of each item's corresponding section
; The item categories defined by each item type section are loaded in order from top to bottom
; Item types sections should be named as such:
; [<ItemClassName + "Types">]
; example:
;     with a class (within the proper namespace defined in ItemDatabase.cs)
;     named Weapon that extends Item it's section would be named [WeaponTypes]
; --------------------------------------------------------------------------------------------
; >> Keys used in Types sections:
; categoryName={string}                     ; the in-game name of a ItemCategory of this type
; {int}={string}                            ; index and name of the Item section  
; --------------------------------------------------------------------------------------------
; The order each item is loaded can be altered by changing their index
; Indexes must start at zero and numbers can't be skipped or duplicated
; --------------------------------------------------------------------------------------------
; Each Item section hold the data for it's item, previously defined in it's type section
; when a key is not defined here, the game loads it's default value instead
; --------------------------------------------------------------------------------------------
; >> Keys used in all items:
; name={string, default = "generic_item"}   ; the name of the item
; cost={int, default = 0}                   ; how much is this item's base cost
; weight={float, default = 0}               ; how much does this item weight
; stackLimit={int, default = 99}            ; maximum Number of this item in a stack
; multiStack={bool, default = true}         ; allow additional stacks in inventory?           

; ## Item type sections ######################################################################
[WeaponTypes]
categoryName="Weapons"
0=ShortSword
1=MagicSword

[ArmorTypes]
categoryName="Armors"
0=LeatherTunic

[KeyItemTypes]
categoryName="Key Items"
0=BookOfKnowledge
1=TrianglePiece

; ## Weapons #################################################################################
; >> Keys used in Weapon type items:
; attack={int, default = 0}     ; this weapon's attack cost
[ShortSword]
name="Short Sword"
cost=50
attack=3
weight=3.5

[MagicSword]
name="Magic Sword"
cost=400
attack=9
weight=5.8

; ## Armors ##################################################################################
; >> Keys used in Armor type items:
; defense={int, default = 0}    ; this armor's defense cost
[LeatherTunic]
name="Leather Tunic"
cost=30
defense=1
weight=4.2

; ## Key Items ###############################################################################
[BookOfKnowledge]
name="Book of Knowledge"
stackLimit=1
multiStack=false

[TrianglePiece]
name="Triangle Piece"
stackLimit=3
multiStack=false